#!/bin/bash
#
# Copyright (C) 2017 Jonathan Rajotte <jonathan.rajotte-julien@efficios.com>
#
# SPDX-License-Identifier: LGPL-2.1-only

CURDIR=$(dirname "$0")/
TESTDIR=$CURDIR/../../../

TMPDIR=$(mktemp -d)

#This is needed since the testpoint create a pipe with the consumerd type suffixed
TESTPOINT_BASE_PATH=$(readlink -f "$TMPDIR/lttng.t_p_n")
TESTPOINT_PIPE_PATH=$(mktemp -u "${TESTPOINT_BASE_PATH}.XXXXXX")
TESTPOINT=$(readlink -f "${CURDIR}/.libs/libpause_consumer.so")
TESTAPP_STATE_PATH=$(mktemp -u "$TMPDIR/application_state.XXXXXXXXXX")


SESSION_NAME="my_session"
CHANNEL_NAME="my_channel"

NUM_TESTS=104

# shellcheck source=../../../utils/utils.sh
source "$TESTDIR/utils/utils.sh"

function kernel_event_generator_toggle_state
{
	kernel_event_generator_suspended=$((kernel_event_generator_suspended==0))
}

function generate_filter_events
{
	/bin/echo -n "10" > /proc/lttng-test-filter-event 2> /dev/null
}

function kernel_event_generator
{
	command_to_run=$1
	state_file=$2
	kernel_event_generator_suspended=0
	trap kernel_event_generator_toggle_state SIGUSR1

	while (true); do
		if [[ $kernel_event_generator_suspended -eq "1" ]]; then
			touch $state_file
			sleep 0.5
		else
			if [[ -f $state_file ]]; then
				rm $state_file 2> /dev/null
			fi
			$command_to_run
		fi
	done
}

function test_buffer_usage_notification
{
	local event_name="lttng_test_filter_event"
	local trace_path
	local page_size
	local consumerd_pipe=()

	trace_path=$(mktemp -d)
	page_size=$(getconf PAGE_SIZE)

	create_lttng_session_notap $SESSION_NAME "$trace_path"

	lttng_enable_kernel_channel_notap $SESSION_NAME $CHANNEL_NAME \
		--subbuf-size="$page_size"
	enable_kernel_lttng_event_notap $SESSION_NAME $event_name $CHANNEL_NAME

	kernel_event_generator generate_filter_events "$TESTAPP_STATE_PATH" &
	APP_PID=$!

	# This is needed since the testpoint create a pipe with the consumer
	# type suffixed.
	for f in "$TESTPOINT_BASE_PATH"*; do
		consumerd_pipe+=("$f")
	done

	"$CURDIR/notification" 2 LTTNG_DOMAIN_KERNEL $SESSION_NAME $CHANNEL_NAME \
		$APP_PID $TESTAPP_STATE_PATH ${consumerd_pipe[@]}

	destroy_lttng_session_notap $SESSION_NAME

	kill -9 $APP_PID
	wait $APP_PID 2> /dev/null
}

if [ "$(id -u)" == "0" ]; then

	validate_lttng_modules_present


	modprobe lttng-test

	# Used on sessiond launch.
	LTTNG_SESSIOND_ENV_VARS="LTTNG_TESTPOINT_ENABLE=1 \
		CONSUMER_PAUSE_PIPE_PATH=${TESTPOINT_PIPE_PATH} \
		LD_PRELOAD=${TESTPOINT}"
	start_lttng_sessiond_notap

	test_buffer_usage_notification

	stop_lttng_sessiond_notap
	rmmod lttng-test

	rm -rf "${consumerd_pipe[@]}" 2> /dev/null
else
	# Kernel tests are skipped.
	plan_tests $NUM_TESTS
	skip 0 "Root access is needed. Skipping all kernel notification tests." $NUM_TESTS
fi

rm -rf "$TMPDIR"
