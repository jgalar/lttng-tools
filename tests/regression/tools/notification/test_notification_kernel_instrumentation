#!/bin/bash
#
# Copyright (C) 2017 Jonathan Rajotte-Julien <jonathan.rajotte-julien@efficios.com>
#
# SPDX-License-Identifier: LGPL-2.1-only

CURDIR=$(dirname $0)/
TESTDIR=$CURDIR/../../../

TMPDIR=$(mktemp -d)

#This is needed since the testpoint create a pipe with the consumerd type suffixed
TESTPOINT_BASE_PATH=$(readlink -f "$TMPDIR/lttng.t_p_n")
TESTPOINT_PIPE_PATH=$(mktemp -u "${TESTPOINT_BASE_PATH}.XXXXXX")
TESTPOINT=$(readlink -f ${CURDIR}/.libs/libpause_consumer.so)


TESTAPP_PATH="$TESTDIR/utils/testapp"
TESTAPP_NAME="gen-ust-events"
TESTAPP_BIN="$TESTAPP_PATH/$TESTAPP_NAME/$TESTAPP_NAME"
TESTAPP_STATE_PATH=$(mktemp -u "$TMPDIR/application_state.XXXXXXXXXX")

SYSCALL_TESTAPP_NAME="gen-syscall-events"
SYSCALL_TESTAPP_BIN="$TESTAPP_PATH/$SYSCALL_TESTAPP_NAME/$SYSCALL_TESTAPP_NAME"

USERSPACE_PROBE_ELF_TESTAPP_NAME="userspace-probe-elf-binary"
USERSPACE_PROBE_ELF_TESTAPP_BIN="$TESTAPP_PATH/$USERSPACE_PROBE_ELF_TESTAPP_NAME/.libs/$USERSPACE_PROBE_ELF_TESTAPP_NAME"

SESSION_NAME="my_session"
CHANNEL_NAME="my_channel"

TRACE_PATH=$(mktemp -d)
PAGE_SIZE=$(getconf PAGE_SIZE)

DIR=$(readlink -f $TESTDIR)
NUM_TESTS=104

source $TESTDIR/utils/utils.sh

function kernel_event_generator_toggle_state
{
	kernel_event_generator_suspended=$((kernel_event_generator_suspended==0))
}

function generate_filter_events
{
	/bin/echo -n "10" > /proc/lttng-test-filter-event 2> /dev/null
}

function generate_syscalls
{
	# Pass /dev/null so to generate the syscall right away.
	$SYSCALL_TESTAPP_BIN /dev/null
}

function userspace_probe_testapp
{
	 $USERSPACE_PROBE_ELF_TESTAPP_BIN
}

function kernel_event_generator
{
	command_to_run=$1
	state_file=$2
	kernel_event_generator_suspended=0
	trap kernel_event_generator_toggle_state SIGUSR1

	while (true); do
		if [[ $kernel_event_generator_suspended -eq "1" ]]; then
			touch $state_file
			sleep 0.5
		else
			if [[ -f $state_file ]]; then
				rm $state_file 2> /dev/null
			fi
			$command_to_run
		fi
	done
}

function test_kernel_instrumentation_notification
{
	kernel_event_generator generate_filter_events $TESTAPP_STATE_PATH &
	APP_PID=$!

	$CURDIR/notification 4 LTTNG_DOMAIN_KERNEL $APP_PID $TESTAPP_STATE_PATH

	kill -9 $APP_PID
	wait $APP_PID 2> /dev/null
}

if [ "$(id -u)" == "0" ]; then
	consumerd_pipe=()

	validate_lttng_modules_present

	# This is needed since the testpoint create a pipe with the consumer
	# type suffixed.
	for f in "$TESTPOINT_BASE_PATH"*; do
		consumerd_pipe+=("$f")
	done

	modprobe lttng-test

	LTTNG_SESSIOND_ENV_VARS="LTTNG_TESTPOINT_ENABLE=1 \
		CONSUMER_PAUSE_PIPE_PATH=${TESTPOINT_PIPE_PATH} \
		LD_PRELOAD=${TESTPOINT}"

	start_lttng_sessiond_notap

	test_kernel_instrumentation_notification

	stop_lttng_sessiond_notap
	rmmod lttng-test

	rm -rf ${consumerd_pipe[@]} 2> /dev/null
else
	# Kernel tests are skipped.
	plan_tests $NUM_TESTS
	skip 0 "Root access is needed. Skipping all kernel notification tests." $NUM_TESTS
fi

# Just in case cleanup
rm -rf $TRACE_PATH
rm -rf $TMPDIR
